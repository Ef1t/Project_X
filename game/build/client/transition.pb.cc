// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transition.proto

#include "transition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewBulletMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewPlayerMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ServerToUserMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBulletMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePlayerMessage_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePlayerMessage_Direction_transition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerMessage_Direction_transition_2eproto;
namespace trans {
class UserToServerMessage_DirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserToServerMessage_Direction> _instance;
} _UserToServerMessage_Direction_default_instance_;
class UserToServerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserToServerMessage> _instance;
} _UserToServerMessage_default_instance_;
class SessionCreatedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionCreatedMessage> _instance;
} _SessionCreatedMessage_default_instance_;
class UserInitMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInitMessage> _instance;
} _UserInitMessage_default_instance_;
class NewPlayerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewPlayerMessage> _instance;
} _NewPlayerMessage_default_instance_;
class UpdatePlayerMessage_DirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlayerMessage_Direction> _instance;
} _UpdatePlayerMessage_Direction_default_instance_;
class UpdatePlayerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlayerMessage> _instance;
} _UpdatePlayerMessage_default_instance_;
class NewBulletMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewBulletMessage> _instance;
} _NewBulletMessage_default_instance_;
class UpdateBulletMessage_DirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateBulletMessage_Direction> _instance;
} _UpdateBulletMessage_Direction_default_instance_;
class UpdateBulletMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateBulletMessage> _instance;
} _UpdateBulletMessage_default_instance_;
class ServerToUserMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToUserMessage> _instance;
} _ServerToUserMessage_default_instance_;
class ServerToUserVectorMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToUserVectorMessage> _instance;
} _ServerToUserVectorMessage_default_instance_;
}  // namespace trans
static void InitDefaultsscc_info_NewBulletMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_NewBulletMessage_default_instance_;
    new (ptr) ::trans::NewBulletMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::NewBulletMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewBulletMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewBulletMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_NewPlayerMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_NewPlayerMessage_default_instance_;
    new (ptr) ::trans::NewPlayerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::NewPlayerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewPlayerMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewPlayerMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_ServerToUserMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_ServerToUserMessage_default_instance_;
    new (ptr) ::trans::ServerToUserMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::ServerToUserMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ServerToUserMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ServerToUserMessage_transition_2eproto}, {
      &scc_info_NewPlayerMessage_transition_2eproto.base,
      &scc_info_UpdatePlayerMessage_transition_2eproto.base,
      &scc_info_NewBulletMessage_transition_2eproto.base,
      &scc_info_UpdateBulletMessage_transition_2eproto.base,}};

static void InitDefaultsscc_info_ServerToUserVectorMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_ServerToUserVectorMessage_default_instance_;
    new (ptr) ::trans::ServerToUserVectorMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::ServerToUserVectorMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerToUserVectorMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerToUserVectorMessage_transition_2eproto}, {
      &scc_info_ServerToUserMessage_transition_2eproto.base,}};

static void InitDefaultsscc_info_SessionCreatedMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_SessionCreatedMessage_default_instance_;
    new (ptr) ::trans::SessionCreatedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::SessionCreatedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionCreatedMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionCreatedMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_UpdateBulletMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UpdateBulletMessage_default_instance_;
    new (ptr) ::trans::UpdateBulletMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UpdateBulletMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBulletMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateBulletMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_UpdateBulletMessage_Direction_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UpdateBulletMessage_Direction_default_instance_;
    new (ptr) ::trans::UpdateBulletMessage_Direction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UpdateBulletMessage_Direction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBulletMessage_Direction_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateBulletMessage_Direction_transition_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePlayerMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UpdatePlayerMessage_default_instance_;
    new (ptr) ::trans::UpdatePlayerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UpdatePlayerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePlayerMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdatePlayerMessage_transition_2eproto}, {
      &scc_info_UpdatePlayerMessage_Direction_transition_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePlayerMessage_Direction_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UpdatePlayerMessage_Direction_default_instance_;
    new (ptr) ::trans::UpdatePlayerMessage_Direction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UpdatePlayerMessage_Direction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePlayerMessage_Direction_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePlayerMessage_Direction_transition_2eproto}, {}};

static void InitDefaultsscc_info_UserInitMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UserInitMessage_default_instance_;
    new (ptr) ::trans::UserInitMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UserInitMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInitMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInitMessage_transition_2eproto}, {}};

static void InitDefaultsscc_info_UserToServerMessage_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UserToServerMessage_default_instance_;
    new (ptr) ::trans::UserToServerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UserToServerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserToServerMessage_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserToServerMessage_transition_2eproto}, {
      &scc_info_UserToServerMessage_Direction_transition_2eproto.base,}};

static void InitDefaultsscc_info_UserToServerMessage_Direction_transition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trans::_UserToServerMessage_Direction_default_instance_;
    new (ptr) ::trans::UserToServerMessage_Direction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans::UserToServerMessage_Direction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserToServerMessage_Direction_transition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserToServerMessage_Direction_transition_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transition_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_transition_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transition_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, up_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, left_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, right_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, down_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage_Direction, fire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage, type_),
  PROTOBUF_FIELD_OFFSET(::trans::UserToServerMessage, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::SessionCreatedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::SessionCreatedMessage, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UserInitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UserInitMessage, action_),
  PROTOBUF_FIELD_OFFSET(::trans::UserInitMessage, username_),
  PROTOBUF_FIELD_OFFSET(::trans::UserInitMessage, session_id_),
  PROTOBUF_FIELD_OFFSET(::trans::UserInitMessage, map_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, id_),
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, username_),
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, x_),
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, y_),
  PROTOBUF_FIELD_OFFSET(::trans::NewPlayerMessage, map_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, up_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, left_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, right_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, down_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage_Direction, fire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, id_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, x_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, y_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdatePlayerMessage, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, id_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, x_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, y_),
  PROTOBUF_FIELD_OFFSET(::trans::NewBulletMessage, map_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage_Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage_Direction, up_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage_Direction, left_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage_Direction, right_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage_Direction, down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, id_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, x_),
  PROTOBUF_FIELD_OFFSET(::trans::UpdateBulletMessage, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, type_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, np_msg_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, upd_msg_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, nb_msg_),
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserMessage, ub_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserVectorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans::ServerToUserVectorMessage, vec_messages_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::trans::UserToServerMessage_Direction)},
  { 10, -1, sizeof(::trans::UserToServerMessage)},
  { 17, -1, sizeof(::trans::SessionCreatedMessage)},
  { 23, -1, sizeof(::trans::UserInitMessage)},
  { 32, -1, sizeof(::trans::NewPlayerMessage)},
  { 42, -1, sizeof(::trans::UpdatePlayerMessage_Direction)},
  { 52, -1, sizeof(::trans::UpdatePlayerMessage)},
  { 61, -1, sizeof(::trans::NewBulletMessage)},
  { 70, -1, sizeof(::trans::UpdateBulletMessage_Direction)},
  { 79, -1, sizeof(::trans::UpdateBulletMessage)},
  { 87, -1, sizeof(::trans::ServerToUserMessage)},
  { 97, -1, sizeof(::trans::ServerToUserVectorMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UserToServerMessage_Direction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UserToServerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_SessionCreatedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UserInitMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_NewPlayerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UpdatePlayerMessage_Direction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UpdatePlayerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_NewBulletMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UpdateBulletMessage_Direction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_UpdateBulletMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_ServerToUserMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trans::_ServerToUserVectorMessage_default_instance_),
};

const char descriptor_table_protodef_transition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020transition.proto\022\005trans\"\374\001\n\023UserToServ"
  "erMessage\0224\n\004type\030\001 \001(\0162&.trans.UserToSe"
  "rverMessage.MessageType\0227\n\tdirection\030\002 \001"
  "(\0132$.trans.UserToServerMessage.Direction"
  "\032P\n\tDirection\022\n\n\002up\030\001 \001(\010\022\014\n\004left\030\002 \001(\010\022"
  "\r\n\005right\030\003 \001(\010\022\014\n\004down\030\004 \001(\010\022\014\n\004fire\030\005 \001"
  "(\010\"$\n\013MessageType\022\013\n\007Standby\020\000\022\010\n\004Move\020\001"
  "\"+\n\025SessionCreatedMessage\022\022\n\nsession_id\030"
  "\001 \001(\005\"\230\001\n\017UserInitMessage\022-\n\006action\030\001 \001("
  "\0162\035.trans.UserInitMessage.Action\022\020\n\010user"
  "name\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\005\022\020\n\010map_na"
  "me\030\004 \001(\t\"\036\n\006Action\022\n\n\006Create\020\000\022\010\n\004Join\020\001"
  "\"X\n\020NewPlayerMessage\022\n\n\002id\030\001 \001(\005\022\020\n\010user"
  "name\030\002 \001(\t\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\020\n\010map_"
  "name\030\005 \001(\t\"\302\001\n\023UpdatePlayerMessage\022\n\n\002id"
  "\030\001 \001(\005\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\0227\n\tdirectio"
  "n\030\004 \001(\0132$.trans.UpdatePlayerMessage.Dire"
  "ction\032P\n\tDirection\022\n\n\002up\030\001 \001(\010\022\014\n\004left\030\002"
  " \001(\010\022\r\n\005right\030\003 \001(\010\022\014\n\004down\030\004 \001(\010\022\014\n\004fir"
  "e\030\005 \001(\010\"F\n\020NewBulletMessage\022\n\n\002id\030\001 \001(\005\022"
  "\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\020\n\010map_name\030\004 \001(\t\""
  "{\n\023UpdateBulletMessage\022\n\n\002id\030\001 \001(\005\022\t\n\001x\030"
  "\002 \001(\002\022\t\n\001y\030\003 \001(\002\032B\n\tDirection\022\n\n\002up\030\001 \001("
  "\010\022\014\n\004left\030\002 \001(\010\022\r\n\005right\030\003 \001(\010\022\014\n\004down\030\004"
  " \001(\010\"\307\002\n\023ServerToUserMessage\0224\n\004type\030\001 \001"
  "(\0162&.trans.ServerToUserMessage.MessageTy"
  "pe\022\'\n\006np_msg\030\002 \001(\0132\027.trans.NewPlayerMess"
  "age\022+\n\007upd_msg\030\003 \001(\0132\032.trans.UpdatePlaye"
  "rMessage\022\'\n\006nb_msg\030\004 \001(\0132\027.trans.NewBull"
  "etMessage\022*\n\006ub_msg\030\005 \001(\0132\032.trans.Update"
  "BulletMessage\"O\n\013MessageType\022\r\n\tNewPlaye"
  "r\020\000\022\020\n\014UpdatePlayer\020\001\022\r\n\tNewBullet\020\002\022\020\n\014"
  "UpdateBullet\020\003\"M\n\031ServerToUserVectorMess"
  "age\0220\n\014vec_messages\030\001 \003(\0132\032.trans.Server"
  "ToUserMessageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transition_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transition_2eproto_sccs[12] = {
  &scc_info_NewBulletMessage_transition_2eproto.base,
  &scc_info_NewPlayerMessage_transition_2eproto.base,
  &scc_info_ServerToUserMessage_transition_2eproto.base,
  &scc_info_ServerToUserVectorMessage_transition_2eproto.base,
  &scc_info_SessionCreatedMessage_transition_2eproto.base,
  &scc_info_UpdateBulletMessage_transition_2eproto.base,
  &scc_info_UpdateBulletMessage_Direction_transition_2eproto.base,
  &scc_info_UpdatePlayerMessage_transition_2eproto.base,
  &scc_info_UpdatePlayerMessage_Direction_transition_2eproto.base,
  &scc_info_UserInitMessage_transition_2eproto.base,
  &scc_info_UserToServerMessage_transition_2eproto.base,
  &scc_info_UserToServerMessage_Direction_transition_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transition_2eproto_once;
static bool descriptor_table_transition_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transition_2eproto = {
  &descriptor_table_transition_2eproto_initialized, descriptor_table_protodef_transition_2eproto, "transition.proto", 1381,
  &descriptor_table_transition_2eproto_once, descriptor_table_transition_2eproto_sccs, descriptor_table_transition_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_transition_2eproto::offsets,
  file_level_metadata_transition_2eproto, 12, file_level_enum_descriptors_transition_2eproto, file_level_service_descriptors_transition_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transition_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transition_2eproto), true);
namespace trans {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserToServerMessage_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transition_2eproto);
  return file_level_enum_descriptors_transition_2eproto[0];
}
bool UserToServerMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserToServerMessage_MessageType UserToServerMessage::Standby;
constexpr UserToServerMessage_MessageType UserToServerMessage::Move;
constexpr UserToServerMessage_MessageType UserToServerMessage::MessageType_MIN;
constexpr UserToServerMessage_MessageType UserToServerMessage::MessageType_MAX;
constexpr int UserToServerMessage::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserInitMessage_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transition_2eproto);
  return file_level_enum_descriptors_transition_2eproto[1];
}
bool UserInitMessage_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserInitMessage_Action UserInitMessage::Create;
constexpr UserInitMessage_Action UserInitMessage::Join;
constexpr UserInitMessage_Action UserInitMessage::Action_MIN;
constexpr UserInitMessage_Action UserInitMessage::Action_MAX;
constexpr int UserInitMessage::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerToUserMessage_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transition_2eproto);
  return file_level_enum_descriptors_transition_2eproto[2];
}
bool ServerToUserMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerToUserMessage_MessageType ServerToUserMessage::NewPlayer;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::UpdatePlayer;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::NewBullet;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::UpdateBullet;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::MessageType_MIN;
constexpr ServerToUserMessage_MessageType ServerToUserMessage::MessageType_MAX;
constexpr int ServerToUserMessage::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void UserToServerMessage_Direction::InitAsDefaultInstance() {
}
class UserToServerMessage_Direction::_Internal {
 public:
};

UserToServerMessage_Direction::UserToServerMessage_Direction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.UserToServerMessage.Direction)
}
UserToServerMessage_Direction::UserToServerMessage_Direction(const UserToServerMessage_Direction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&fire_) -
    reinterpret_cast<char*>(&up_)) + sizeof(fire_));
  // @@protoc_insertion_point(copy_constructor:trans.UserToServerMessage.Direction)
}

void UserToServerMessage_Direction::SharedCtor() {
  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fire_) -
      reinterpret_cast<char*>(&up_)) + sizeof(fire_));
}

UserToServerMessage_Direction::~UserToServerMessage_Direction() {
  // @@protoc_insertion_point(destructor:trans.UserToServerMessage.Direction)
  SharedDtor();
}

void UserToServerMessage_Direction::SharedDtor() {
}

void UserToServerMessage_Direction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserToServerMessage_Direction& UserToServerMessage_Direction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserToServerMessage_Direction_transition_2eproto.base);
  return *internal_default_instance();
}


void UserToServerMessage_Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UserToServerMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fire_) -
      reinterpret_cast<char*>(&up_)) + sizeof(fire_));
  _internal_metadata_.Clear();
}

const char* UserToServerMessage_Direction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserToServerMessage_Direction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UserToServerMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_up(), target);
  }

  // bool left = 2;
  if (this->left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_left(), target);
  }

  // bool right = 3;
  if (this->right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_right(), target);
  }

  // bool down = 4;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_down(), target);
  }

  // bool fire = 5;
  if (this->fire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UserToServerMessage.Direction)
  return target;
}

size_t UserToServerMessage_Direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UserToServerMessage.Direction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // bool left = 2;
  if (this->left() != 0) {
    total_size += 1 + 1;
  }

  // bool right = 3;
  if (this->right() != 0) {
    total_size += 1 + 1;
  }

  // bool down = 4;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  // bool fire = 5;
  if (this->fire() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToServerMessage_Direction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UserToServerMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToServerMessage_Direction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserToServerMessage_Direction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UserToServerMessage.Direction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UserToServerMessage.Direction)
    MergeFrom(*source);
  }
}

void UserToServerMessage_Direction::MergeFrom(const UserToServerMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UserToServerMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from.left() != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from.right() != 0) {
    _internal_set_right(from._internal_right());
  }
  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
  if (from.fire() != 0) {
    _internal_set_fire(from._internal_fire());
  }
}

void UserToServerMessage_Direction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UserToServerMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerMessage_Direction::CopyFrom(const UserToServerMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UserToServerMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerMessage_Direction::IsInitialized() const {
  return true;
}

void UserToServerMessage_Direction::InternalSwap(UserToServerMessage_Direction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(up_, other->up_);
  swap(left_, other->left_);
  swap(right_, other->right_);
  swap(down_, other->down_);
  swap(fire_, other->fire_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToServerMessage_Direction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserToServerMessage::InitAsDefaultInstance() {
  ::trans::_UserToServerMessage_default_instance_._instance.get_mutable()->direction_ = const_cast< ::trans::UserToServerMessage_Direction*>(
      ::trans::UserToServerMessage_Direction::internal_default_instance());
}
class UserToServerMessage::_Internal {
 public:
  static const ::trans::UserToServerMessage_Direction& direction(const UserToServerMessage* msg);
};

const ::trans::UserToServerMessage_Direction&
UserToServerMessage::_Internal::direction(const UserToServerMessage* msg) {
  return *msg->direction_;
}
UserToServerMessage::UserToServerMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.UserToServerMessage)
}
UserToServerMessage::UserToServerMessage(const UserToServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_direction()) {
    direction_ = new ::trans::UserToServerMessage_Direction(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:trans.UserToServerMessage)
}

void UserToServerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserToServerMessage_transition_2eproto.base);
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(type_));
}

UserToServerMessage::~UserToServerMessage() {
  // @@protoc_insertion_point(destructor:trans.UserToServerMessage)
  SharedDtor();
}

void UserToServerMessage::SharedDtor() {
  if (this != internal_default_instance()) delete direction_;
}

void UserToServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserToServerMessage& UserToServerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserToServerMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void UserToServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UserToServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* UserToServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trans.UserToServerMessage.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::trans::UserToServerMessage_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .trans.UserToServerMessage.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserToServerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UserToServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trans.UserToServerMessage.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .trans.UserToServerMessage.Direction direction = 2;
  if (this->has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::direction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UserToServerMessage)
  return target;
}

size_t UserToServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UserToServerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trans.UserToServerMessage.Direction direction = 2;
  if (this->has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // .trans.UserToServerMessage.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserToServerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UserToServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserToServerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserToServerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UserToServerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UserToServerMessage)
    MergeFrom(*source);
  }
}

void UserToServerMessage::MergeFrom(const UserToServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UserToServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_direction()) {
    _internal_mutable_direction()->::trans::UserToServerMessage_Direction::MergeFrom(from._internal_direction());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void UserToServerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UserToServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserToServerMessage::CopyFrom(const UserToServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UserToServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToServerMessage::IsInitialized() const {
  return true;
}

void UserToServerMessage::InternalSwap(UserToServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(direction_, other->direction_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToServerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionCreatedMessage::InitAsDefaultInstance() {
}
class SessionCreatedMessage::_Internal {
 public:
};

SessionCreatedMessage::SessionCreatedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.SessionCreatedMessage)
}
SessionCreatedMessage::SessionCreatedMessage(const SessionCreatedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:trans.SessionCreatedMessage)
}

void SessionCreatedMessage::SharedCtor() {
  session_id_ = 0;
}

SessionCreatedMessage::~SessionCreatedMessage() {
  // @@protoc_insertion_point(destructor:trans.SessionCreatedMessage)
  SharedDtor();
}

void SessionCreatedMessage::SharedDtor() {
}

void SessionCreatedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionCreatedMessage& SessionCreatedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionCreatedMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void SessionCreatedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.SessionCreatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = 0;
  _internal_metadata_.Clear();
}

const char* SessionCreatedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionCreatedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.SessionCreatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.SessionCreatedMessage)
  return target;
}

size_t SessionCreatedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.SessionCreatedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionCreatedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.SessionCreatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionCreatedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionCreatedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.SessionCreatedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.SessionCreatedMessage)
    MergeFrom(*source);
  }
}

void SessionCreatedMessage::MergeFrom(const SessionCreatedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.SessionCreatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void SessionCreatedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.SessionCreatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionCreatedMessage::CopyFrom(const SessionCreatedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.SessionCreatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionCreatedMessage::IsInitialized() const {
  return true;
}

void SessionCreatedMessage::InternalSwap(SessionCreatedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionCreatedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInitMessage::InitAsDefaultInstance() {
}
class UserInitMessage::_Internal {
 public:
};

UserInitMessage::UserInitMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.UserInitMessage)
}
UserInitMessage::UserInitMessage(const UserInitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&action_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:trans.UserInitMessage)
}

void UserInitMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInitMessage_transition_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&action_)) + sizeof(session_id_));
}

UserInitMessage::~UserInitMessage() {
  // @@protoc_insertion_point(destructor:trans.UserInitMessage)
  SharedDtor();
}

void UserInitMessage::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInitMessage& UserInitMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInitMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void UserInitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UserInitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&action_)) + sizeof(session_id_));
  _internal_metadata_.Clear();
}

const char* UserInitMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trans.UserInitMessage.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::trans::UserInitMessage_Action>(val));
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.UserInitMessage.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string map_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.UserInitMessage.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInitMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UserInitMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trans.UserInitMessage.Action action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.UserInitMessage.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // int32 session_id = 3;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_session_id(), target);
  }

  // string map_name = 4;
  if (this->map_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.UserInitMessage.map_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_map_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UserInitMessage)
  return target;
}

size_t UserInitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UserInitMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string map_name = 4;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // .trans.UserInitMessage.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // int32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInitMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UserInitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInitMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInitMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UserInitMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UserInitMessage)
    MergeFrom(*source);
  }
}

void UserInitMessage::MergeFrom(const UserInitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UserInitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.map_name().size() > 0) {

    map_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void UserInitMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UserInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInitMessage::CopyFrom(const UserInitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UserInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInitMessage::IsInitialized() const {
  return true;
}

void UserInitMessage::InternalSwap(UserInitMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_, other->action_);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInitMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewPlayerMessage::InitAsDefaultInstance() {
}
class NewPlayerMessage::_Internal {
 public:
};

NewPlayerMessage::NewPlayerMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.NewPlayerMessage)
}
NewPlayerMessage::NewPlayerMessage(const NewPlayerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:trans.NewPlayerMessage)
}

void NewPlayerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewPlayerMessage_transition_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(y_));
}

NewPlayerMessage::~NewPlayerMessage() {
  // @@protoc_insertion_point(destructor:trans.NewPlayerMessage)
  SharedDtor();
}

void NewPlayerMessage::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewPlayerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewPlayerMessage& NewPlayerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewPlayerMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void NewPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.NewPlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* NewPlayerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.NewPlayerMessage.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string map_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.NewPlayerMessage.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewPlayerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.NewPlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.NewPlayerMessage.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // string map_name = 5;
  if (this->map_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.NewPlayerMessage.map_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_map_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.NewPlayerMessage)
  return target;
}

size_t NewPlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.NewPlayerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string map_name = 5;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewPlayerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.NewPlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NewPlayerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewPlayerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.NewPlayerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.NewPlayerMessage)
    MergeFrom(*source);
  }
}

void NewPlayerMessage::MergeFrom(const NewPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.NewPlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.map_name().size() > 0) {

    map_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void NewPlayerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.NewPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPlayerMessage::CopyFrom(const NewPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.NewPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPlayerMessage::IsInitialized() const {
  return true;
}

void NewPlayerMessage::InternalSwap(NewPlayerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewPlayerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePlayerMessage_Direction::InitAsDefaultInstance() {
}
class UpdatePlayerMessage_Direction::_Internal {
 public:
};

UpdatePlayerMessage_Direction::UpdatePlayerMessage_Direction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.UpdatePlayerMessage.Direction)
}
UpdatePlayerMessage_Direction::UpdatePlayerMessage_Direction(const UpdatePlayerMessage_Direction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&fire_) -
    reinterpret_cast<char*>(&up_)) + sizeof(fire_));
  // @@protoc_insertion_point(copy_constructor:trans.UpdatePlayerMessage.Direction)
}

void UpdatePlayerMessage_Direction::SharedCtor() {
  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fire_) -
      reinterpret_cast<char*>(&up_)) + sizeof(fire_));
}

UpdatePlayerMessage_Direction::~UpdatePlayerMessage_Direction() {
  // @@protoc_insertion_point(destructor:trans.UpdatePlayerMessage.Direction)
  SharedDtor();
}

void UpdatePlayerMessage_Direction::SharedDtor() {
}

void UpdatePlayerMessage_Direction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlayerMessage_Direction& UpdatePlayerMessage_Direction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlayerMessage_Direction_transition_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlayerMessage_Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UpdatePlayerMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fire_) -
      reinterpret_cast<char*>(&up_)) + sizeof(fire_));
  _internal_metadata_.Clear();
}

const char* UpdatePlayerMessage_Direction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayerMessage_Direction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UpdatePlayerMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_up(), target);
  }

  // bool left = 2;
  if (this->left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_left(), target);
  }

  // bool right = 3;
  if (this->right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_right(), target);
  }

  // bool down = 4;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_down(), target);
  }

  // bool fire = 5;
  if (this->fire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UpdatePlayerMessage.Direction)
  return target;
}

size_t UpdatePlayerMessage_Direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UpdatePlayerMessage.Direction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // bool left = 2;
  if (this->left() != 0) {
    total_size += 1 + 1;
  }

  // bool right = 3;
  if (this->right() != 0) {
    total_size += 1 + 1;
  }

  // bool down = 4;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  // bool fire = 5;
  if (this->fire() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayerMessage_Direction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UpdatePlayerMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerMessage_Direction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlayerMessage_Direction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UpdatePlayerMessage.Direction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UpdatePlayerMessage.Direction)
    MergeFrom(*source);
  }
}

void UpdatePlayerMessage_Direction::MergeFrom(const UpdatePlayerMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UpdatePlayerMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from.left() != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from.right() != 0) {
    _internal_set_right(from._internal_right());
  }
  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
  if (from.fire() != 0) {
    _internal_set_fire(from._internal_fire());
  }
}

void UpdatePlayerMessage_Direction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UpdatePlayerMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerMessage_Direction::CopyFrom(const UpdatePlayerMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UpdatePlayerMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerMessage_Direction::IsInitialized() const {
  return true;
}

void UpdatePlayerMessage_Direction::InternalSwap(UpdatePlayerMessage_Direction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(up_, other->up_);
  swap(left_, other->left_);
  swap(right_, other->right_);
  swap(down_, other->down_);
  swap(fire_, other->fire_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerMessage_Direction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePlayerMessage::InitAsDefaultInstance() {
  ::trans::_UpdatePlayerMessage_default_instance_._instance.get_mutable()->direction_ = const_cast< ::trans::UpdatePlayerMessage_Direction*>(
      ::trans::UpdatePlayerMessage_Direction::internal_default_instance());
}
class UpdatePlayerMessage::_Internal {
 public:
  static const ::trans::UpdatePlayerMessage_Direction& direction(const UpdatePlayerMessage* msg);
};

const ::trans::UpdatePlayerMessage_Direction&
UpdatePlayerMessage::_Internal::direction(const UpdatePlayerMessage* msg) {
  return *msg->direction_;
}
UpdatePlayerMessage::UpdatePlayerMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.UpdatePlayerMessage)
}
UpdatePlayerMessage::UpdatePlayerMessage(const UpdatePlayerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_direction()) {
    direction_ = new ::trans::UpdatePlayerMessage_Direction(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:trans.UpdatePlayerMessage)
}

void UpdatePlayerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePlayerMessage_transition_2eproto.base);
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(y_));
}

UpdatePlayerMessage::~UpdatePlayerMessage() {
  // @@protoc_insertion_point(destructor:trans.UpdatePlayerMessage)
  SharedDtor();
}

void UpdatePlayerMessage::SharedDtor() {
  if (this != internal_default_instance()) delete direction_;
}

void UpdatePlayerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlayerMessage& UpdatePlayerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlayerMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UpdatePlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* UpdatePlayerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .trans.UpdatePlayerMessage.Direction direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UpdatePlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // .trans.UpdatePlayerMessage.Direction direction = 4;
  if (this->has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::direction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UpdatePlayerMessage)
  return target;
}

size_t UpdatePlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UpdatePlayerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trans.UpdatePlayerMessage.Direction direction = 4;
  if (this->has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UpdatePlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlayerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UpdatePlayerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UpdatePlayerMessage)
    MergeFrom(*source);
  }
}

void UpdatePlayerMessage::MergeFrom(const UpdatePlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UpdatePlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_direction()) {
    _internal_mutable_direction()->::trans::UpdatePlayerMessage_Direction::MergeFrom(from._internal_direction());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void UpdatePlayerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UpdatePlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerMessage::CopyFrom(const UpdatePlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UpdatePlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerMessage::IsInitialized() const {
  return true;
}

void UpdatePlayerMessage::InternalSwap(UpdatePlayerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(direction_, other->direction_);
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewBulletMessage::InitAsDefaultInstance() {
}
class NewBulletMessage::_Internal {
 public:
};

NewBulletMessage::NewBulletMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.NewBulletMessage)
}
NewBulletMessage::NewBulletMessage(const NewBulletMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:trans.NewBulletMessage)
}

void NewBulletMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewBulletMessage_transition_2eproto.base);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(y_));
}

NewBulletMessage::~NewBulletMessage() {
  // @@protoc_insertion_point(destructor:trans.NewBulletMessage)
  SharedDtor();
}

void NewBulletMessage::SharedDtor() {
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewBulletMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewBulletMessage& NewBulletMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewBulletMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void NewBulletMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.NewBulletMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* NewBulletMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string map_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trans.NewBulletMessage.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewBulletMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.NewBulletMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // string map_name = 4;
  if (this->map_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans.NewBulletMessage.map_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_map_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.NewBulletMessage)
  return target;
}

size_t NewBulletMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.NewBulletMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_name = 4;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewBulletMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.NewBulletMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NewBulletMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewBulletMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.NewBulletMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.NewBulletMessage)
    MergeFrom(*source);
  }
}

void NewBulletMessage::MergeFrom(const NewBulletMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.NewBulletMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_name().size() > 0) {

    map_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void NewBulletMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.NewBulletMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewBulletMessage::CopyFrom(const NewBulletMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.NewBulletMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBulletMessage::IsInitialized() const {
  return true;
}

void NewBulletMessage::InternalSwap(NewBulletMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewBulletMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateBulletMessage_Direction::InitAsDefaultInstance() {
}
class UpdateBulletMessage_Direction::_Internal {
 public:
};

UpdateBulletMessage_Direction::UpdateBulletMessage_Direction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.UpdateBulletMessage.Direction)
}
UpdateBulletMessage_Direction::UpdateBulletMessage_Direction(const UpdateBulletMessage_Direction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
  // @@protoc_insertion_point(copy_constructor:trans.UpdateBulletMessage.Direction)
}

void UpdateBulletMessage_Direction::SharedCtor() {
  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&up_)) + sizeof(down_));
}

UpdateBulletMessage_Direction::~UpdateBulletMessage_Direction() {
  // @@protoc_insertion_point(destructor:trans.UpdateBulletMessage.Direction)
  SharedDtor();
}

void UpdateBulletMessage_Direction::SharedDtor() {
}

void UpdateBulletMessage_Direction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBulletMessage_Direction& UpdateBulletMessage_Direction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateBulletMessage_Direction_transition_2eproto.base);
  return *internal_default_instance();
}


void UpdateBulletMessage_Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UpdateBulletMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&up_)) + sizeof(down_));
  _internal_metadata_.Clear();
}

const char* UpdateBulletMessage_Direction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool down = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateBulletMessage_Direction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UpdateBulletMessage.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_up(), target);
  }

  // bool left = 2;
  if (this->left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_left(), target);
  }

  // bool right = 3;
  if (this->right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_right(), target);
  }

  // bool down = 4;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UpdateBulletMessage.Direction)
  return target;
}

size_t UpdateBulletMessage_Direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UpdateBulletMessage.Direction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool up = 1;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // bool left = 2;
  if (this->left() != 0) {
    total_size += 1 + 1;
  }

  // bool right = 3;
  if (this->right() != 0) {
    total_size += 1 + 1;
  }

  // bool down = 4;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBulletMessage_Direction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UpdateBulletMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBulletMessage_Direction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateBulletMessage_Direction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UpdateBulletMessage.Direction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UpdateBulletMessage.Direction)
    MergeFrom(*source);
  }
}

void UpdateBulletMessage_Direction::MergeFrom(const UpdateBulletMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UpdateBulletMessage.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from.left() != 0) {
    _internal_set_left(from._internal_left());
  }
  if (from.right() != 0) {
    _internal_set_right(from._internal_right());
  }
  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
}

void UpdateBulletMessage_Direction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UpdateBulletMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBulletMessage_Direction::CopyFrom(const UpdateBulletMessage_Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UpdateBulletMessage.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBulletMessage_Direction::IsInitialized() const {
  return true;
}

void UpdateBulletMessage_Direction::InternalSwap(UpdateBulletMessage_Direction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(up_, other->up_);
  swap(left_, other->left_);
  swap(right_, other->right_);
  swap(down_, other->down_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBulletMessage_Direction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateBulletMessage::InitAsDefaultInstance() {
}
class UpdateBulletMessage::_Internal {
 public:
};

UpdateBulletMessage::UpdateBulletMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.UpdateBulletMessage)
}
UpdateBulletMessage::UpdateBulletMessage(const UpdateBulletMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:trans.UpdateBulletMessage)
}

void UpdateBulletMessage::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(y_));
}

UpdateBulletMessage::~UpdateBulletMessage() {
  // @@protoc_insertion_point(destructor:trans.UpdateBulletMessage)
  SharedDtor();
}

void UpdateBulletMessage::SharedDtor() {
}

void UpdateBulletMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBulletMessage& UpdateBulletMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateBulletMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void UpdateBulletMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.UpdateBulletMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* UpdateBulletMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateBulletMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.UpdateBulletMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.UpdateBulletMessage)
  return target;
}

size_t UpdateBulletMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.UpdateBulletMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBulletMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.UpdateBulletMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBulletMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateBulletMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.UpdateBulletMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.UpdateBulletMessage)
    MergeFrom(*source);
  }
}

void UpdateBulletMessage::MergeFrom(const UpdateBulletMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.UpdateBulletMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void UpdateBulletMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.UpdateBulletMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBulletMessage::CopyFrom(const UpdateBulletMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.UpdateBulletMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBulletMessage::IsInitialized() const {
  return true;
}

void UpdateBulletMessage::InternalSwap(UpdateBulletMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBulletMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToUserMessage::InitAsDefaultInstance() {
  ::trans::_ServerToUserMessage_default_instance_._instance.get_mutable()->np_msg_ = const_cast< ::trans::NewPlayerMessage*>(
      ::trans::NewPlayerMessage::internal_default_instance());
  ::trans::_ServerToUserMessage_default_instance_._instance.get_mutable()->upd_msg_ = const_cast< ::trans::UpdatePlayerMessage*>(
      ::trans::UpdatePlayerMessage::internal_default_instance());
  ::trans::_ServerToUserMessage_default_instance_._instance.get_mutable()->nb_msg_ = const_cast< ::trans::NewBulletMessage*>(
      ::trans::NewBulletMessage::internal_default_instance());
  ::trans::_ServerToUserMessage_default_instance_._instance.get_mutable()->ub_msg_ = const_cast< ::trans::UpdateBulletMessage*>(
      ::trans::UpdateBulletMessage::internal_default_instance());
}
class ServerToUserMessage::_Internal {
 public:
  static const ::trans::NewPlayerMessage& np_msg(const ServerToUserMessage* msg);
  static const ::trans::UpdatePlayerMessage& upd_msg(const ServerToUserMessage* msg);
  static const ::trans::NewBulletMessage& nb_msg(const ServerToUserMessage* msg);
  static const ::trans::UpdateBulletMessage& ub_msg(const ServerToUserMessage* msg);
};

const ::trans::NewPlayerMessage&
ServerToUserMessage::_Internal::np_msg(const ServerToUserMessage* msg) {
  return *msg->np_msg_;
}
const ::trans::UpdatePlayerMessage&
ServerToUserMessage::_Internal::upd_msg(const ServerToUserMessage* msg) {
  return *msg->upd_msg_;
}
const ::trans::NewBulletMessage&
ServerToUserMessage::_Internal::nb_msg(const ServerToUserMessage* msg) {
  return *msg->nb_msg_;
}
const ::trans::UpdateBulletMessage&
ServerToUserMessage::_Internal::ub_msg(const ServerToUserMessage* msg) {
  return *msg->ub_msg_;
}
ServerToUserMessage::ServerToUserMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.ServerToUserMessage)
}
ServerToUserMessage::ServerToUserMessage(const ServerToUserMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_np_msg()) {
    np_msg_ = new ::trans::NewPlayerMessage(*from.np_msg_);
  } else {
    np_msg_ = nullptr;
  }
  if (from._internal_has_upd_msg()) {
    upd_msg_ = new ::trans::UpdatePlayerMessage(*from.upd_msg_);
  } else {
    upd_msg_ = nullptr;
  }
  if (from._internal_has_nb_msg()) {
    nb_msg_ = new ::trans::NewBulletMessage(*from.nb_msg_);
  } else {
    nb_msg_ = nullptr;
  }
  if (from._internal_has_ub_msg()) {
    ub_msg_ = new ::trans::UpdateBulletMessage(*from.ub_msg_);
  } else {
    ub_msg_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:trans.ServerToUserMessage)
}

void ServerToUserMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToUserMessage_transition_2eproto.base);
  ::memset(&np_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&np_msg_)) + sizeof(type_));
}

ServerToUserMessage::~ServerToUserMessage() {
  // @@protoc_insertion_point(destructor:trans.ServerToUserMessage)
  SharedDtor();
}

void ServerToUserMessage::SharedDtor() {
  if (this != internal_default_instance()) delete np_msg_;
  if (this != internal_default_instance()) delete upd_msg_;
  if (this != internal_default_instance()) delete nb_msg_;
  if (this != internal_default_instance()) delete ub_msg_;
}

void ServerToUserMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToUserMessage& ServerToUserMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToUserMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void ServerToUserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.ServerToUserMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && np_msg_ != nullptr) {
    delete np_msg_;
  }
  np_msg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && upd_msg_ != nullptr) {
    delete upd_msg_;
  }
  upd_msg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && nb_msg_ != nullptr) {
    delete nb_msg_;
  }
  nb_msg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ub_msg_ != nullptr) {
    delete ub_msg_;
  }
  ub_msg_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* ServerToUserMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trans.ServerToUserMessage.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::trans::ServerToUserMessage_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .trans.NewPlayerMessage np_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_np_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.UpdatePlayerMessage upd_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_upd_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.NewBulletMessage nb_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nb_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .trans.UpdateBulletMessage ub_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ub_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToUserMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.ServerToUserMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trans.ServerToUserMessage.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .trans.NewPlayerMessage np_msg = 2;
  if (this->has_np_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::np_msg(this), target, stream);
  }

  // .trans.UpdatePlayerMessage upd_msg = 3;
  if (this->has_upd_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::upd_msg(this), target, stream);
  }

  // .trans.NewBulletMessage nb_msg = 4;
  if (this->has_nb_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::nb_msg(this), target, stream);
  }

  // .trans.UpdateBulletMessage ub_msg = 5;
  if (this->has_ub_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ub_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.ServerToUserMessage)
  return target;
}

size_t ServerToUserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.ServerToUserMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trans.NewPlayerMessage np_msg = 2;
  if (this->has_np_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *np_msg_);
  }

  // .trans.UpdatePlayerMessage upd_msg = 3;
  if (this->has_upd_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upd_msg_);
  }

  // .trans.NewBulletMessage nb_msg = 4;
  if (this->has_nb_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nb_msg_);
  }

  // .trans.UpdateBulletMessage ub_msg = 5;
  if (this->has_ub_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ub_msg_);
  }

  // .trans.ServerToUserMessage.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToUserMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.ServerToUserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToUserMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToUserMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.ServerToUserMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.ServerToUserMessage)
    MergeFrom(*source);
  }
}

void ServerToUserMessage::MergeFrom(const ServerToUserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.ServerToUserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_np_msg()) {
    _internal_mutable_np_msg()->::trans::NewPlayerMessage::MergeFrom(from._internal_np_msg());
  }
  if (from.has_upd_msg()) {
    _internal_mutable_upd_msg()->::trans::UpdatePlayerMessage::MergeFrom(from._internal_upd_msg());
  }
  if (from.has_nb_msg()) {
    _internal_mutable_nb_msg()->::trans::NewBulletMessage::MergeFrom(from._internal_nb_msg());
  }
  if (from.has_ub_msg()) {
    _internal_mutable_ub_msg()->::trans::UpdateBulletMessage::MergeFrom(from._internal_ub_msg());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ServerToUserMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.ServerToUserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToUserMessage::CopyFrom(const ServerToUserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.ServerToUserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToUserMessage::IsInitialized() const {
  return true;
}

void ServerToUserMessage::InternalSwap(ServerToUserMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(np_msg_, other->np_msg_);
  swap(upd_msg_, other->upd_msg_);
  swap(nb_msg_, other->nb_msg_);
  swap(ub_msg_, other->ub_msg_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToUserMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerToUserVectorMessage::InitAsDefaultInstance() {
}
class ServerToUserVectorMessage::_Internal {
 public:
};

ServerToUserVectorMessage::ServerToUserVectorMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans.ServerToUserVectorMessage)
}
ServerToUserVectorMessage::ServerToUserVectorMessage(const ServerToUserVectorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vec_messages_(from.vec_messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trans.ServerToUserVectorMessage)
}

void ServerToUserVectorMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToUserVectorMessage_transition_2eproto.base);
}

ServerToUserVectorMessage::~ServerToUserVectorMessage() {
  // @@protoc_insertion_point(destructor:trans.ServerToUserVectorMessage)
  SharedDtor();
}

void ServerToUserVectorMessage::SharedDtor() {
}

void ServerToUserVectorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToUserVectorMessage& ServerToUserVectorMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToUserVectorMessage_transition_2eproto.base);
  return *internal_default_instance();
}


void ServerToUserVectorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:trans.ServerToUserVectorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_messages_.Clear();
  _internal_metadata_.Clear();
}

const char* ServerToUserVectorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trans.ServerToUserMessage vec_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToUserVectorMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans.ServerToUserVectorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trans.ServerToUserMessage vec_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vec_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vec_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans.ServerToUserVectorMessage)
  return target;
}

size_t ServerToUserVectorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans.ServerToUserVectorMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trans.ServerToUserMessage vec_messages = 1;
  total_size += 1UL * this->_internal_vec_messages_size();
  for (const auto& msg : this->vec_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToUserVectorMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans.ServerToUserVectorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToUserVectorMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToUserVectorMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans.ServerToUserVectorMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans.ServerToUserVectorMessage)
    MergeFrom(*source);
  }
}

void ServerToUserVectorMessage::MergeFrom(const ServerToUserVectorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans.ServerToUserVectorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_messages_.MergeFrom(from.vec_messages_);
}

void ServerToUserVectorMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans.ServerToUserVectorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToUserVectorMessage::CopyFrom(const ServerToUserVectorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans.ServerToUserVectorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToUserVectorMessage::IsInitialized() const {
  return true;
}

void ServerToUserVectorMessage::InternalSwap(ServerToUserVectorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vec_messages_.InternalSwap(&other->vec_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToUserVectorMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace trans
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trans::UserToServerMessage_Direction* Arena::CreateMaybeMessage< ::trans::UserToServerMessage_Direction >(Arena* arena) {
  return Arena::CreateInternal< ::trans::UserToServerMessage_Direction >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UserToServerMessage* Arena::CreateMaybeMessage< ::trans::UserToServerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::trans::UserToServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::SessionCreatedMessage* Arena::CreateMaybeMessage< ::trans::SessionCreatedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::trans::SessionCreatedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UserInitMessage* Arena::CreateMaybeMessage< ::trans::UserInitMessage >(Arena* arena) {
  return Arena::CreateInternal< ::trans::UserInitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::NewPlayerMessage* Arena::CreateMaybeMessage< ::trans::NewPlayerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::trans::NewPlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UpdatePlayerMessage_Direction* Arena::CreateMaybeMessage< ::trans::UpdatePlayerMessage_Direction >(Arena* arena) {
  return Arena::CreateInternal< ::trans::UpdatePlayerMessage_Direction >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UpdatePlayerMessage* Arena::CreateMaybeMessage< ::trans::UpdatePlayerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::trans::UpdatePlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::NewBulletMessage* Arena::CreateMaybeMessage< ::trans::NewBulletMessage >(Arena* arena) {
  return Arena::CreateInternal< ::trans::NewBulletMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UpdateBulletMessage_Direction* Arena::CreateMaybeMessage< ::trans::UpdateBulletMessage_Direction >(Arena* arena) {
  return Arena::CreateInternal< ::trans::UpdateBulletMessage_Direction >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::UpdateBulletMessage* Arena::CreateMaybeMessage< ::trans::UpdateBulletMessage >(Arena* arena) {
  return Arena::CreateInternal< ::trans::UpdateBulletMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::ServerToUserMessage* Arena::CreateMaybeMessage< ::trans::ServerToUserMessage >(Arena* arena) {
  return Arena::CreateInternal< ::trans::ServerToUserMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::trans::ServerToUserVectorMessage* Arena::CreateMaybeMessage< ::trans::ServerToUserVectorMessage >(Arena* arena) {
  return Arena::CreateInternal< ::trans::ServerToUserVectorMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
